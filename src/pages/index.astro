---
import Section from "../layouts/Section.astro";
const title = "What is Axelar?";

const cards = [
  {
    title: "Developer",
    description:
      "Use Solidity or JavaScript to send tokens and interact with smart contracts across chains.",
    url: "/dev/intro",
    icon: `<svg style="margin-right:8px;" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><g><path fill="none" d="M0 0h24v24H0z"></path><path d="M23 12l-7.071 7.071-1.414-1.414L20.172 12l-5.657-5.657 1.414-1.414L23 12zM3.828 12l5.657 5.657-1.414 1.414L1 12l7.071-7.071 1.414 1.414L3.828 12z"></path></g></svg>`,
  },
  {
    title: "Satellite user",
    description:
      "Satellite is a web app built on top of the Axelar network. Use it to transfer assets from one chain to another.",
    url: "/resources/satellite",
    icon: `<svg style="margin-right:8px;"  stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><g><path fill="none" d="M0 0h24v24H0z"></path><path d="M14.368 4.398l-3.484 6.035 1.732 1L16.1 5.398c4.17 2.772 6.306 7.08 4.56 10.102-1.86 3.222-7.189 3.355-11.91.63C4.029 13.402 1.48 8.721 3.34 5.5c1.745-3.023 6.543-3.327 11.028-1.102zm1.516-2.625l1.732 1-1.5 2.598-1.732-1 1.5-2.598zM6.732 20H17v2H5.017a.995.995 0 0 1-.883-.5 1.005 1.005 0 0 1 0-1l2.25-3.897 1.732 1L6.732 20z"></path></g></svg>`,
  },
  {
    title: "Node operator",
    description: "Learn how to run a node on the Axelar network",
    url: "/node/join",
    icon: `<svg style="margin-right:8px;"  stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><g><path fill="none" d="M0 0h24v24H0z"></path><path d="M5.334 4.545a9.99 9.99 0 0 1 3.542-2.048A3.993 3.993 0 0 0 12 3.999a3.993 3.993 0 0 0 3.124-1.502 9.99 9.99 0 0 1 3.542 2.048 3.993 3.993 0 0 0 .262 3.454 3.993 3.993 0 0 0 2.863 1.955 10.043 10.043 0 0 1 0 4.09c-1.16.178-2.23.86-2.863 1.955a3.993 3.993 0 0 0-.262 3.455 9.99 9.99 0 0 1-3.542 2.047A3.993 3.993 0 0 0 12 20a3.993 3.993 0 0 0-3.124 1.502 9.99 9.99 0 0 1-3.542-2.047 3.993 3.993 0 0 0-.262-3.455 3.993 3.993 0 0 0-2.863-1.954 10.043 10.043 0 0 1 0-4.091 3.993 3.993 0 0 0 2.863-1.955 3.993 3.993 0 0 0 .262-3.454zM13.5 14.597a3 3 0 1 0-3-5.196 3 3 0 0 0 3 5.196z"></path></g></svg>`,
  },
  {
    title: "Validator",
    description: "Axelar validators facilitate cross-chain connections",
    url: "/validator/setup/overview",
    icon: `<svg style="margin-right:8px;"  stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><g><path fill="none" d="M0 0h24v24H0z"></path><path d="M4 3h16a1 1 0 0 1 1 1v7H3V4a1 1 0 0 1 1-1zM3 13h18v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-7zm4 3v2h3v-2H7zM7 6v2h3V6H7z"></path></g></svg>`,
  },
];
---

<Section title={title}>
  Axelar delivers secure cross-chain communication for Web3, enabling you to
  build Interchain dApps that grow beyond a single chain. <em>Secure</em> means Axelar
  is built on proof-of-stake, the battle-tested approach used by Ethereum, Polygon,
  Cosmos, and more. <em>Cross-chain communication</em> means you can build a complete
  experience for your users that lets them interact with any asset, any application,
  on any chain with one click.

  <style>
    .card-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(2, 1fr);
      grid-column-gap: 16px;
      grid-row-gap: 16px;
      grid-auto-flow: row;
      margin-top: 32px;
    }
    .card {
      padding: 16px;
      border: 1px solid rgb(229, 231, 235);
      border-radius: 4px;
      margin-right: 16px;
      display: flex;
      flex-direction: column;
      background-color: #fff;
      color: inherit;
    }
    .card:hover {
      box-shadow: 0 0 10px #ddd;
      color: inherit;
    }
    .card div:nth-child(1) {
      font-weight: bold;
      display: flex;
      align-items: center;
    }
    .card div:nth-child(2) {
      flex-grow: 1;
    }
    .card span {
      color: #1b62d6;
    }

    @media (max-width: 768px) {
      .card-grid {
        display: flex;
        flex-direction: column;
      }
    }
  </style>

  <div class="card-grid">
    {
      cards.map((card) => (
        <a class="card" href={card.url}>
          <div>
            <Fragment set:html={card.icon}/> {card.title}
          </div>
          <div>{card.description}</div>
          <span>
            Get Started{" "}
            <svg
              stroke="currentColor"
              fill="currentColor"
              stroke-width="0"
              viewBox="0 0 20 20"
              class="mt-0.5"
              height="16"
              width="16"
              xmlns="http://www.w3.org/2000/svg"
              style="vertical-align:middle;"
            >
              <path
                fill-rule="evenodd"
                d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
                clip-rule="evenodd"
              />
            </svg>
          </span>
        </a>
      ))
    }
  </div>
</Section>
